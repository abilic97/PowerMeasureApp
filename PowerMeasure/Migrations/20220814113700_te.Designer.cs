// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerMeasure.Data;

namespace PowerMeasure.Migrations
{
    [DbContext(typeof(PowerMeasureDbContext))]
    [Migration("20220814113700_te")]
    partial class te
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PowerMeasure.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BillAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EnergyCharge")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("PowerMeasure.Models.EnergyConsumed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Current")
                        .HasColumnType("float");

                    b.Property<int?>("EnergyMeterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDailyFinal")
                        .HasColumnType("bit");

                    b.Property<double>("Power")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Voltage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EnergyMeterId");

                    b.ToTable("Consumption");
                });

            modelBuilder.Entity("PowerMeasure.Models.EnergyMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateActiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateActiveTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnergyMeterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserContractRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserContractRef")
                        .IsUnique();

                    b.ToTable("Meter");
                });

            modelBuilder.Entity("PowerMeasure.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PowerMeasure.Models.UserContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ContractValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractValidTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("PowerMeasure.Models.User_Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Roles");
                });

            modelBuilder.Entity("PowerMeasure.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PowerMeasure.Models.Bill", b =>
                {
                    b.HasOne("PowerMeasure.Models.Users", null)
                        .WithMany("Bills")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("PowerMeasure.Models.EnergyConsumed", b =>
                {
                    b.HasOne("PowerMeasure.Models.EnergyMeter", null)
                        .WithMany("Consumptions")
                        .HasForeignKey("EnergyMeterId");
                });

            modelBuilder.Entity("PowerMeasure.Models.EnergyMeter", b =>
                {
                    b.HasOne("PowerMeasure.Models.UserContract", "Contract")
                        .WithOne("EnergyMeter")
                        .HasForeignKey("PowerMeasure.Models.EnergyMeter", "UserContractRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("PowerMeasure.Models.UserContract", b =>
                {
                    b.HasOne("PowerMeasure.Models.Users", null)
                        .WithMany("Contracts")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("PowerMeasure.Models.User_Role", b =>
                {
                    b.HasOne("PowerMeasure.Models.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerMeasure.Models.Users", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PowerMeasure.Models.EnergyMeter", b =>
                {
                    b.Navigation("Consumptions");
                });

            modelBuilder.Entity("PowerMeasure.Models.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("PowerMeasure.Models.UserContract", b =>
                {
                    b.Navigation("EnergyMeter");
                });

            modelBuilder.Entity("PowerMeasure.Models.Users", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Contracts");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
